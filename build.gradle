plugins {
    id 'java-gradle-plugin'
    id "com.jfrog.bintray" version '1.8.4'
    id 'net.researchgate.release' version '2.8.1'
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'java-gradle-plugin'

group = 'de.fanero.gradle.plugin.nar'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    testImplementation gradleTestKit()
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-integration', version: '1.3'
    testImplementation("org.spockframework:spock-core:1.3-groovy-2.5") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

sourceSets {
    integrationTest {
        groovy.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
    functionalTest {
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'Gradle Nar Plugin')
                root.appendNode('description', 'Gradle plugin to support development of Apache NiFi nar archives')
                root.appendNode('url', 'https://github.com/sponiro/gradle-nar-plugin')
                root.appendNode('inceptionYear', '2015')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/sponiro/gradle-nar-plugin')
                scm.appendNode('connection', 'scm:https://github.com/sponiro/gradle-nar-plugin.git')
                scm.appendNode('developerConnection', 'scm:git:https://github.com/sponiro/gradle-nar-plugin.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def rkuehne = developers.appendNode('developer')
                rkuehne.appendNode('id', 'rkuehne')
                rkuehne.appendNode('name', 'Robert KÃ¼hne')
                rkuehne.appendNode('email', 'sponiro@gmail.com')
            }
        }
    }
}

afterReleaseBuild.dependsOn bintrayUpload

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : null
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : null
    publications = ['mavenJava']
    pkg {
        repo = 'gradle-plugins'
        name = 'gradle-nar-plugin'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/sponiro/gradle-nar-plugin'
    }
}
